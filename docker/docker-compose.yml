services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crashed-car-sales-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crashed_car_sales}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-crashed_car_sales}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - crashed-car-sales-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crashed-car-sales-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - crashed-car-sales-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: crashed-car-sales-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s
    networks:
      - crashed-car-sales-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: crashed-car-sales-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - crashed-car-sales-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: crashed-car-sales-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - crashed-car-sales-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crashed-car-sales-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - crashed-car-sales-network

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: crashed-car-sales-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      DATABASE_URL: jdbc:postgresql://${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-crashed_car_sales}
      DATABASE_USERNAME: ${POSTGRES_USER:-postgres}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-password}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      S3_ENDPOINT: http://${MINIO_HOST:-minio}:${MINIO_API_PORT:-9000}
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      S3_BUCKET: ${S3_BUCKET:-crashed-car-sales}
      # Monitoring
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      # Logging
      LOGGING_LEVEL_COM_CRASHEDCARSALES: ${LOG_LEVEL:-INFO}
      # Security
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
    ports:
      - "${BACKEND_PORT:-8081}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - crashed-car-sales-network

  # Frontend Application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: crashed-car-sales-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://${BACKEND_HOST:-backend}:${BACKEND_PORT:-8080}/api
      NEXT_PUBLIC_CDN_URL: http://${MINIO_HOST:-minio}:${MINIO_API_PORT:-9000}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-https://your-domain.com}
      # Performance monitoring
      NEXT_PUBLIC_ENABLE_PERFORMANCE_MONITORING: ${ENABLE_PERFORMANCE_MONITORING:-true}
      # Analytics
      NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID:-}
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - crashed-car-sales-network

  # Log aggregation (Optional - for production)
  # fluent-bit:
  #   image: fluent/fluent-bit:latest
  #   container_name: crashed-car-sales-logging
  #   volumes:
  #     - ./logging/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #   networks:
  #     - crashed-car-sales-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  crashed-car-sales-network:
    driver: bridge
    name: crashed-car-sales-network